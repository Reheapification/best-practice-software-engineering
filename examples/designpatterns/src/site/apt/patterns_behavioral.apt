   ---
   Behavioral Design Patterns
   ---
   Erik Gostischa-Franta
   ---
   ---

Behavioral Design Patterns

  Behavioral patterns are specifically concerned with identifying common interactions between objects
  and realizing these. This increases the flexibility by letting them
  talk to each other but still retaining the desired loose coupling between these objects. Some of these 
  patterns overlap with patterns from the Structural Patterns section. 


  \ 

  Behavioral <class patterns> use inheritance to distribute behavior between classes.
  <[GoF, "Design Patterns", Addison Wesley, ISBN 0201633612].>
  
~~ 	    * <<Template Method>> defines the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.
 
 
  \ 

  Behavioral <object patterns> use object composition rather than inheritance.
  <[GoF, "Design Patterns", Addison Wesley, ISBN 0201633612].>

~~  	* <<Chain of Responsibility>> prescribes communication between objects - it chains the receiving objects of a request and passes the request along the chain until an object handles it. Decouples senders and receivers, gives more than one object the chance to handle the request.
~~ 	    * <<Command>> defines an object that acts as a token to be passed around and invoked at a later time - it encapsulates a request, utilizes polymorphism. Command lets you parameterize clients with different requests, it allows queueing and logging requests aswell as undoable operations.
~~	    * <<Memento>> captures and externalizes an object's internal state, usually non-polymorphic. Memento allows the object to be restored to a later state.
  	    * {{{./{patterns/iterator.html}<<Iterator>>}} encapsulates the way you access and traverse the elements of an aggregate sequentially without exposing its underlying representation.
~~  	* <<Mediator>> encapsulates the protocol between objects, centralizes communication. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.

        * {{{./patterns/observer.html}<<Observer>>}} defines a one-to-many dependency between objects, distributes communication. Observer notifies all its dependents when the observed object changes its state.
                 
        * {{{./patterns/event_listener.html}<<Event Listener>>}} is a special flavor of the Observer pattern. 
 
~~  	* <<State>> encapsulates a state-dependent behaviour. When an objects internal state changes its behaviour is also altered, the object will appear to change its class.
 
        * {{{./patterns/strategy.html}<<Strategy>>}} encapsulates algorithms (separately) and makes them interchangeable. 
 		Strategy lets the algorithm vary depending on the client that uses it.
 
 ~~ 	* <<Visitor>> applies an operation to each element of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.
  
  \ 
  
~~* Discussion of behavioral patterns
~~
~~  Behavioral patterns describe not just patterns of objects or classes but also the patterns of communication between them. These patterns characterize complex control flow that's difficult to follow at run-time. They shift your focus away from flow of control to let you concentrate just on the way objects are interconnected.
~~
~~  Several behavioral patterns use objects as arguments like the Visitor or Command patterns.
~~  Observer, Mediator and Chain of Responsibility - the ones that address communication try to decouple the senders and receivers in a system.
~~  Mediator and Observer directly complement each other where one centralizes and the other
~~  decentralizes the communication between objects. Other behavioral patterns describe aspects of a program that are likely
~~  to change, so they encapsulate variations like the State, Strategy or Iterator patterns and the data can be reorganized without changing the user interface.
~~  
~~  \ 
  
* References / More Info

  {{{http://en.wikipedia.org/wiki/Behavioral_pattern} Behavioral Patterns - Wikipedia}}
  
  {{{http://www.patterndepot.com/put/8/Behavioral.html} Behavioral Patterns - Pattern Depot}}
  