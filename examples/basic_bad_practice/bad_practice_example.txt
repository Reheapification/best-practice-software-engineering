"Bad-Practice" Beispiel, abgeleitet vom Basic "Best-Practice" Beispiel


1. Allgemein 
----------------------------------------------------------- 

1.1 - "Logging" mit System.out.println
  + Tina: Basis.java - alle log.info durch System.out.println ersetzt

1.2 - falsche loglevels
  + Tina: JdbcObjectStudentDAO.java
	updateStudent(...) log.info --> log.debug
	deleteStudent(...) log.info --> log.debug
	todo: Spezifikation --> auf Info loggen was sie machen

1.3 - unzureichende bzw. unverständliche Outputs
  + Tina: Class MainFrame - private void export(): log.error("File Writing Error: " + e); -->
							log.error("Error!");

1.4 - Konstanten werden im Programm nicht als solche deklariert, sondern bspw.:
  + Tina: class Constants(...)
	final entfernt bei SPRINGBEANS und LOG_PROPERTIES_FILE

1.5 - Sichtbarkeit von Methoden/Variablen
  + Tina: class ExportComboModel
	private entfernt bei log, exportFilter und selectedItem
	class StudentTableModel - private String order geändert in public String order

1.6 - Klassen werden nicht ordentlich in Packages organisiert, sondern 
      nicht zusammengehörige in einem Package
  + Tina: Basis.java verschoben in das package at.ac.tuwien.ifs.qse.se1.basis.helper
	  package at.ac.tuwien.ifs.qse.se1.basis gelöscht
  
1.7 - Package Nomenklatur folgt nicht dem "URL" Standard, also:
      topleveldomain.domain.project.package...
  + Tina: at.ac.tuwien.ifs.qse.se1. entfernt vor basis.test.*

1.8 - Namenskonventionen werden gebrochen:
      Klassen groß, Rest klein...
  + Tina: Basis.java - MainFrame mf ersetzt durch MF
	  class htmlExport statt HtmlExport (Änderung auch in beanx.xml notwendig)

1.9 - Zugriff auf Instanzvariablen über Variablenname (class.attribut) nicht getter oder setter-Methoden               (class.getAttribut())
  + Tina: class StudentTableModel - public String order (siehe 1.5) --> 
	  class MainFrame studentenTM.order =  order u. studentenTM.reload() anstatt von 	            studentenTM.setOrder(order);
	  
1.10 - Pakete, Klassen, Methoden nicht, unvollständig oder fehlerhaft dokumentiert
  + Tina: class XmlExportImport nicht dokumentiert
	  class Logger Methode getLogger falsch dokumentiert (copy-paste von configureLog4J)

1.11 - Unterschied zwischen Klassen- und Instanzvariablen/methoden wird nicht
       verstanden, also bspw public static an unpassender Stelle verwendet: static variable in Domain Object
  + Tina: Class XmlExportImport: private Document doc --> static private Document doc

 
1.12 - Wenn Interfaces definiert werden, wird nicht das Interface als Typ verwendet
       sondern die konkrete Klasse:
 
	(z.B. bei Collections: ArrayList statt List-Interfaces von bspw. DAOs werden
	nicht als Interface definiert sondern direkt in der Klasse

	ArrayList myList = new ArrayList(); 
	statt
	List myList = new ArrayList();
  + Tina: Class XmlExportImport: List<Student> studenten --> ArrayList<Student> studenten
	  class MainFrame: IStudentDAO ersetzt durch JdbcObjectStudentDAO 

1.13 - Nichteinhalten der Javadoc-Richtlinien
  + Tina: class RegexTextField
	  Kommentar der Methode setErrorColor geändert /** --> /* und @... weg

1.14 - Typisierung von Listen vergesseen; "Supress Warnings"
  + Tina: class XmlExportImport - @SuppressWarnings("unchecked") public void write(List studenten, String 
          filename) <-- public void write(List<Student> studenten, String filename)

1.15 - Interfaces von bspw. DAOs werden nicht als Interface definiert sondern direkt
       in der Klasse


2. Unit Test
-----------------------------------------------------------

2.1 - Mangelnde DAO Tests
2.2 - Export nicht sauber getestet
2.3 - setup und teardown wird nicht verwendet


3. Database Access (Persistenz)
-----------------------------------------------------------

- Datenmodell nicht normalisiert
  + peter: siehe unten
- kein Primary Key (3.1)
  + peter: primary key von attribut ID entfernt (pruefungen.script)
- keine Indizes (3.2)
  + peter: verwendet keine indices (pruefungen.script)
- Denormalisiert in Bezug auf Studienkennzahl (3.3)
  + peter: STUDKZ0, STUDKZ1, STUDKZ2 eingefügt (pruefungen.script)
- MatNr, Email Adresse Unique? (3.4)
  + peter: ist bereits nicht unique (pruefungen.script)
- DAO in Spring, aber Connection und Transaction Manager werden nicht injected
- DAO nicht als Singleton (3.5)
  + peter: beans.xml StudentDAO singleton="false" schreiben
- (Insert, ID) ohne transaction (3.6)
  + peter: JdbcObjectStudentDAO.saveStudent (Problem wenn keine transaction: insert geht ok, call identity() geht ok, insert schlägt fehl, call identity() liefert wert von altem insert)
- (Kein Connection Reuse, für jede Query neue Connection (statt Singleton/Spring
  Conn.  management)
  + peter: das passiert eigentlich automatisch durch singleton="false"
- (Keine Prepared Statements, bzw. Prepared Statements aber keine
  Wiederverwendung derselben) (3.7)
  + peter: statt in JdbcObjectStudentDAO.init die query subklassen zu instanzieren sie jedes Mal (oder auch nur z.B. eine einzige) instanzieren
- SQL Statements werden in den Source geschrieben, bzw. dort "zusammengebaut" (3.8)
  + peter: das passiert teilweise (z.B. für order by klauseln), in JdbcObjectStudentDAO kann man aber einfach auch die sql_* variablen nicht benutzen
- Zugriff auf Felder im Resultset über Index und nicht über Feldnamen (3.9)
  + peter: in den query subklassen in JdbcObjectStudentDAO jeweils in der mapRow Methode statt getObject(String) getObject(int) verwenden
- Ein "DAO" wird verwendet, aber es findet keine ordentliche Isolation statt,
  d.h. das DAO gibt bspw. Swing Typen zurück, bzw. wird vom UI aus aufgerufen (3.10)
  + peter: TODO: größerer umbau (suche noch einfachen weg)
           NOT YET DONE!
- Datenbankfunktionalität wird in das Programm bezogen z.B. Sortierung, Filter, ... (3.11)
  + peter: im JdbcObjectStudentDAO gibt es zwei klassen die sortierte student listen
           zurückliefern, diese kann man durch eine unsortierte Version ersetzen und
           dann manuell mit einem sorter sortieren, betrifft nur den DAO Source
- NOT NULL Klausel fehlt obwohl sie laut Spezifikation da sein müsste
  + peter: beim Vornamen weggegeben
  
einige dinge die aus den Fehlern entstanden sind:
- kein sorting mehr in der DB --> Comparator Klasse eingefügt für Collections.sort
- sql_getStudent gibt es nicht mehr, die Methode um den string zu setzen macht nichts mehr
- die gesamten query member variablen gibts nicht mehr (werden immer inline instanziert)

4. Benutzerschnittstelle
----------------------------------------------------------- 

- Elemente die nicht verwendbar sind werden nicht deaktiviert (Edit Button z.B.) (4.1)
  + peter: MainFrame.updateButtonStatus entfernen und nicht verwenden
           WICHTIG: sicherstellen dass dann kein race entsteht weil man buttons
           clicken kann obwohl nix ausgewählt ist (safety check einbauen der
           beinahe sinnlos ist!) -> passiert eh nicht!
           NOTE: Kommentar dass es eigentlich gehen sollte beibehalten (ev. kann man dadurch nix davon in die spez schreiben)
- MVC Pattern wird nicht verstanden
  + peter: einfacher Fall: siehe Fehler 3.10
- Keine Lokalisierung der Benutzerschnittstelle (4.2)
  + peter: ist eigentlich nur eine Spezifikationssache, weil der code ist eh nicht lokalisiert
- x schliessen funktioniert nicht (4.3)
  + peter: MainFrame.MainFrame: remove the window listener (das macht zwar einen unguten Fehler, aber es ist auch bisserl unübersichtlich was dann passiert, weil das programm ja noch weiterläuft und nur das Fenster weg ist, aber z.B. auch die Datenbank noch einen lock hat --> man kann keine neue instanz vom Programm starten und sieht das aber im eclipse nicht gut)
           NOT YET DONE!
- falsche Sortierung (Combo Box...) (4.4)
  + in der Combo Box statt Nachname Vorname schreiben, diffiziler wäre: Nachname schreiben jedoch einen Fehler in der Datenbank zu machen (z.B.: sort nach vorname, done, aber nicht in der datenbank sondern im StudentComparator)
- Update Dialog: 
    - xy Layout (4.5)
      + peter: MainFrame.initComponents z.B. statt dem border layout die components nur in den container geben und mit eigener paint methode painten
    - ID Feld editierbar (4.6)
      + peter: statt idLabel vom typ JLabel z.B. auch ein RegexTextField nehmen (wie bei den anderen student attributen)
	           done, wenn man dann blödsinn reinschreibt funktioniert die app nicht richtig (update auf ids die nicht extistieren, parse error bei der conversion von dem id string auf einen Long,...)
    - Werte werden falsch gesetzt (set... get...) sollte im Unit test gefunden werden
      + peter: TODO unit test errors
- JTable ohne JScroll Pane (4.7)
  + peter: MainFrame.initComponents JScrollPane entfernen
- Table skaliert nicht mit Fenster-resize (4.8)
  + peter: xy layout mit fixen größen (siehe 4.5)
           not yet done
- existierendes Feature: Dialog wird nicht nach folgenden Regeln platziert: (Method: placeNewFrame File: MainFrame.java) (4.9)
  + zuerst rechts vom mainframe, dann links davon, dann zentriert
- existierendes Feature: doppelclick auf eine Zeile zeigt editStudent dialog, z.B. in spec, funktioniert aber nicht (4.10)
