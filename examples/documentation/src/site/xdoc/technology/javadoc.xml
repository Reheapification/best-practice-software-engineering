<?xml version="1.0" encoding="UTF-8"?>

<document>
    
    <body>
        <section name="Javadoc (API documentation)">
            <subsection name="Overview">
            <p>Sourcecode documentation is an important but awkward thing to do. Documenting it "offline" typically fails, because developers forget to keep the documentation in sync with changes in the sources. Javadoc provides a solution to this problem:</p>
            <p>
                Javadoc is used to add documentation to Java source code and
                is also referred to as doc comment. It is directly 
                written into source code by programmers. During the build-cycle with Maven it is automatically parsed. The parsed doc comments are then used to generate documentation in HTML format.
                This generated sourcecode documentation can be integrated to the program-documentation created with Maven.
            </p>
            </subsection>
            
            <subsection name="Motivation">
                <p>
                    The description of source code is a very underestimated and
                    thus crucial element for the maintainance and 
                    extension of sofware applications.
                    In the majority of cases, it's value is only seen
                    when other developers must get familarized in code such 
                    as in Open Source projects with hundreds of community members.
                    In Java, the common method for describing source code
                    is writing doc comments for classes, 
                    attributes and methods.
                </p>
            </subsection>             
            <subsection name="Usage">
                <p>
                Doc comments start with <code>/**</code> and are directly placed before
                classes, attributes and methods:
<source>
/**
 * This doc comment should contain a short
 * class description.
 */
public class JavadocExample {

    /** Doc comment for attribute */
    private int attribute;
    
    /**
     * This doc comment should describe the
     * purpose of the constructor
     */
    public JavadocExample() {}
    

    /**
     * This doc comment should describe the
     * purpose of the method
     */    
    public void method() {}
}   
    
</source>
                </p>
                <p>
                    From doc comments, it is possible to generate API documentation 
                    in HTML format which can be published on the Web.
                    A tool named <em>Javadoc</em> provides this functionality and is
                    delivered with every Java 2 SDK. It can be invoked
                    from the command prompt/terminal with the command
                    <code>javadoc</code>. To see documentation,
                    that is generated by the javadoc tool, go to
                    <a href="http://java.sun.com/j2se/1.5.0/docs/api/index.html">
                    J2SE 1.5.0 API Documentation</a>.
                </p>
                <p>
                    Every doc comment can contain additonal information as 
                    tags (starting with @ or {@). They will be handled in a different
                    way by the javadoc tool.
<source>
/**
 * Compares the object ...
 *
 * @param   o the Object to be compared.
 * @return  a negative integer, zero, or a positive integer as this object
 *		is less than, equal to, or greater than the specified object.
 *
 * @throws ClassCastException if the specified object's type prevents it
 *         from being compared to this Object.
 * @author            Daniel Duesentrieb
 */
 public int compareTo(Object o);
 {
     ...
 }
</source>    
                </p>    
                <p>
                    The following table gives a short overview of some tags:
                </p>
                <p>
<table>
<tr>
<th>Tag</th>
<th>Description</th>
</tr>
<tr>
<td>@author</td>
<td>Developer name</td>
</tr>
<tr>
<td>@deprecated</td>
<td>Marks a method or class as deprecated. A warning will be printed during compilation if the method is called.</td>
</tr>
<tr>
<td>@exception</td>
<td>Description of an exception thrown by the method â€” see @throws.</td>
</tr>
<tr>
<td>@param</td>
<td>Description of a method parameter.</td>
</tr>
<tr>
<td>@return</td>
<td>
Description of the return value.
Should not be used for methods defined with a <code>void</code> return type.
</td>
</tr>
<tr>
<td>@see</td>
<td>Creates a link to another method or class.</td>
</tr>
<tr>
<td>@since jdk-version</td>
<td>Since the functionality exists.</td>
</tr>
<tr>
<td>@throws</td>
<td>Description of an exception thrown by the method. A synonym for @exception introduced in Javadoc 1.2.</td>
</tr>
<tr>
<td>@version</td>
<td>Version number of a class or method.</td>
</tr>
<tr>
<td>{@inheritDoc}</td>
<td>Inherits the description of the overwritten method.</td>
</tr>
</table>                    
                </p>    
                
            </subsection>
            <subsection name="Reference">
                <p>
                    More information can be found in 
                    <a href="http://en.wikipedia.org/wiki/Javadoc">Wikipedia</a> 
                    and on the 
                    <a href="http://java.sun.com/j2se/javadoc/">Javadoc Home Page</a>. 
                </p>
            </subsection>
            
            
            
        </section>
        
    </body>
</document>

