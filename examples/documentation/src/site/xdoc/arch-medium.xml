<?xml version="1.0" encoding="UTF-8"?>

<document>
    <properties>
        <title>Medium Sample</title>
        <author></author>
    </properties>
    
    <body>
        <section name="Medium sample">
            <subsection name="Overview">
		The basic sample focus on student administration by providing a rich client. This module increment the system with a student 
information system platform. The following use case diagram illustrates the main functionalities of the medium sample
			<div align="center">
                  	<img src="images/Usecase_Medium.png" />
                  </div>
		<div>
		This table gives an short description about the different use cases.
		<table>
			<tr>
				<td>Search courses</td>
				<td>Provide a simple search functionality of courses which will be displayed in a table format. A student can 
				    register for an course exam</td>
			</tr>
			<tr>
				<td>Search professor</td>
				<td>Provide a simple search functionality of professors which will be displayed in a table format.</td>
			</tr>
			<tr>
				<td>Search for exam</td>
				<td>A student can register for many exams. This use case provides a list of registered exams of the student.</td>
			</tr>
			<tr>
				<td>Register for exam</td>
				<td>A student can register for an exam</td>
			</tr>
		</table>
		</div>
                
                <p>
                    <b>Technical features:</b>
                    <ul>
                        <li>Lifecycle Management with Maven</li>
                        <li>Relational database HSqlDB</li>
                        <li>Full inline documentation (Javadoc)</li>
                        <li>Unittesting with JUnit</li>
                        <li>Logging via Log4J Framework</li>
                        <li>Persistence Layer utilizing Data Access Object Pattern in combination with JDBC Templates of the Spring framework and Dependency Injection</li>
                        <li>Object Relational Mapping Tool Hibernate, in order to persist domain objects. The domain objects are facilitated with Hibernate annotations</li>
                        <li>Webserver can be run with Jetty, by using Maven plugin</li>
                        <li>Presentation layer based on Java Server Faces, an official standard of sun</li>
                        <li>My faces as JSF implementation</li>
                    </ul>
                </p>
                <p>
                    <b>Documentation requirements:</b>
                    
                    <ul>
                        <li>The Java API documentation must be created using the Maven Javadoc plugin and the mvn site task</li>
                        <li>All classes, variables and methods have to be documented in english</li>
                        <li>
                            Each package has to be documented. 
                            A <code>package-info.java</code> file has to be delivered for every package directory
                            containing information what the package is used for.
                        </li>
                    </ul>
                </p>
                Your programed basic sample should later be used as a foundation for further development.
            </subsection>

            <subsection name="Architecture">
			<div align="center">
                  	<img src="images/Architecture_Medium.png" />
                  </div>
			The domain model is implemented with Plain Old Java Objects (POJOs) enhanced with Hibernate Annotations in order to persist 
domain objects. The service layer and DAO layer are enhanced with the aspect layer. We engrid the aspect layer from the service and dao layer
because aspects are cross cutting concerns which can be used over different layers. In order to use the advice layer we define proxies 
for our DAOs and Service objects by using Spring.
The interface between service and presentation layer is the controller layer. This is an important point, because a controller is not a GUI
component, such as a listener. The main task of a controller is to prepare data for the service layer, call it and doing further application
flow. The presentation layer and controller layer are based on JSF (Java Server Faces). We introduce a JsfBeanManager, which provides methods
to get and set managed beans in the JSF context. All web pages are implemented as Java Server Pages (JSPs) using JSF tags. 
            </subsection>


            <subsection name="Used technology">
                    <ul>
                        <li>JPA (Java Persistence Annotations) to annotate domain objects for persiting</li>
                        <li>Object Relational mapping tool Hibernate for persistence</li>
                        <li>Any relational database supported by Hibernate</li>
                        <li>Spring as an application framework, putting things together by using dependency injection</li>
                        <li>Unittesting with JUnit</li>
                        <li>Logging via Log4J Framework</li>
                        <li>AOP (Aspect Oriented Programing) by using Spring and Proxies</li>
                        <li>Java Server Faces as Webframework</li>
                        <li>MyFaces and Tomahawk as reference implementation of the JSF specification</li>
                    </ul>
            </subsection>


            <subsection name="Start the Application">
			<p>As the medium example is an web application we need a web container in order to execute the application. Jetty 
is an open-source full featured web server implemented in Java. In contrast to JBoss or Apache Tomcat this web server is easy to use and can
be integrated with maven without problems. In order to use the Jetty plugin in Maven projects, it must be configured in the pom.xml. Advantages of Jetty:
				<ul>
					<li>Lightweigt web server</li>
					<li>Easy configuration (directly in Java or via configuration files)</li>
					<li>Scalability (e.g. providing continuations)</li>
					<li>Easy to integrate in projects</li>
					<li>Maven integration</li>
				</ul>
			</p>
			<p>
			In order to start and stop the web application with Jetty you must change to the medium directory of the sample. 
				<ol>
					<li>Start jetty server by using mvn jetty:run</li>
					<li>Open: http://localhost:8080/se1-sample-medium/welcome.jsf</li>
					<li>Ready to use</li>
				</ol>
			</p>
            </subsection>

            <subsection name="Used patterns">

            </subsection>            
        </section>
    </body>
</document>

